# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Instrucciones CECONEA
#+DESCRIPTION: Instrucciones basicas de uso
#+KEYWORDS:  syntax, org, document
#+OPTIONS:   H:5 toc:2 p:t

#+SETUPFILE: /home/pulido/alm/soft/org-html-themes/org/theme-readtheorg-local.setup

#+PROPERTY:  header-args :eval never-export
** Estructura del cluster

Si se quiere ver los recursos disponibles, servidores y demas estructura:

[[./servidores.html]]

** Instrucciones ingresar al CECONEA

Para logearse al sistema:

#+BEGIN_SRC bash
ssh usuario@200.45.54.94
#+END_SRC
o

#+BEGIN_SRC bash
usuario@gica.exa.unne.edu.ar
#+END_SRC

Esta maquina se llama sun es el servidor publico

El servidor de calculo para realizar computos (en serie) es grial, desde sun hay que loggearse en grial:

#+BEGIN_SRC bash
sun:~$ ssh grial
#+END_SRC

El home de los usuarios (disco) es compartido entre las dos maquinas a traves de NFS (net file system). Todos los archivos que estan en la sun lo vas a ver en la grial. Tambien se puede transferir directamente a la sun y lo vas a ver desde grial.

Hay dos cosas que pueden ayudar para evitar meterse a una maquina y luego a la otra.

1) Realizar un tunel.
2) ssh without password.


**  Ingresar directamente a la grial

Es posible realizar un tunel para ingresar/trabajar directamente a la grial, en lugar de tener que ingresar a la sun y luego a la grial.

En la maquina local se debe hacer:
#+BEGIN_SRC bash
ssh -fNL 12342:10.11.12.1:22 200.45.54.94
#+END_SRC

y luego se puede acceder a la grial  directamente a traves del puerto 12342:

#+BEGIN_SRC bash
ssh localhost -p 12342 
#+END_SRC

#+BEGIN_SRC bash
scp -P 12342 localhost:archivo-grial  archivo-pclocal
#+END_SRC

** ssh sin claves.

Si vamos a trabajar seguido en forma remota se vuelve engorroso estar permanentemente metiendo los passwords cada vez que queremos conectarnos a una terminal del servidor remoto.

ssh tiene un protocolo que lo que hace es con una sola autentificacion (generalmetne cuando comenzamos a trabajar en la computadora local, se ingresa una passphrase y a partir de alli ya vamos a tener acceso a los servidores sin clave. Pero para eso los servidores se tienen que compartir una key.

Generacion de un passphrase para que no nos pida password. ssh without password

Lo que vamos a hacer  es  generar una ssh passphase y ponerla en ~/.ssh/authorized_keys

Es obligatorio tener una passphrase!

a. Firstly, generate your public/private keys using ssh-keygen

#+BEGIN_SRC bash
ssh-keygen -t rsa
#+END_SRC

b. Now copy the id_rsa.pub to the .ssh/authorized_keys  file  (y tambien conviene poner en la maquina local las mismas keys).

c. Para poner una sola vez la passphase y que despues la recuerde durante la sesion:

#+BEGIN_SRC bash
exec ssh-agent bash
ssh-add
#+END_SRC

Tambien se puede poner en el inicio de la sesion de xwindows.  Una posibilidad es agregarlo en el archivo .xinitrc (El que lee el sistema para ingresar a las xwindows del usuario):

#+BEGIN_SRC bash
    eval `ssh-agent -s`
    export SSH_ASKPASS=/usr/lib64/ssh/x11-ssh-askpass
    /usr/bin/ssh-add < /dev/null 
#+END_SRC

** Correr en python en background


Para dejar corriendo aplicaciones despues de desloggearse, sin que se nos corte la ejecucion cuando salimos del sistema. Hay que hacer:

#+BEGIN_SRC bash
nohup python3 script.py &
#+END_SRC

Yo tengo un peque~no script "nohupyt" que guarda la salida y los errores en un archivo: 

#+BEGIN_SRC bash
#!/bin/bash
#
# Manda a ejecutar un python script en batch con el modo nohup y guarda resultados en un file.
# Uso: nohupyt script.py
#  Salida  se graba en script.out
if [ $# -eq 1 ]; then
    filename=${1%.py}
fi

nohup python3 $filename.py > $filename.out 2>&1 &
#+END_SRC

** Como correr jupyter en el CECONEA

Sin en lugar de tener un script python tenemos una jupyter notebook, Lo que queremos es correrla en el servidor y poder un servidor remoto con port forwarding, pero accediendo desde el browser local. Veamos las instrucciones para hacer esto.


1. Me conecto a sun y luego a grial:

#+BEGIN_SRC bash
ssh -4fNL 2222:10.11.12.1:22 -4fNL 8889:10.11.12.1:8889 200.45.54.94
#+END_SRC

2. Luego abro la conexion en la maquina local
#+BEGIN_SRC bash
ssh -p 2222 localhost
#+END_SRC


3. Abrir una jupyter notebook sin browser:
   
#+BEGIN_SRC bash
jupyter notebook --no-browser --port=8889 --ip=0.0.0.0 
#+END_SRC

Copiar el token que aparece.

4. En la maquina local en el browser:
   http://localhost:8888/?token=8d186032bbbe095b294789e863b065a546fcc15b68683c99

   (el token lo tengo que copiar del servidor remoto).

Para mas detalle ver referencia:

https://thedatafrog.com/en/articles/remote-jupyter-notebooks/

** Como correr jupyter desde el GICA
Hacer en la maquina local:

#+BEGIN_SRC bash
yvy:~$ ssh -L 8080:localhost:8080 grial
#+END_SRC

Esto permite abrir una conexion a grial (con port forwarding al puerto 8080). En la grial ejecutar:

#+BEGIN_SRC bash
grial:~$ jupyter notebook --no-browser
#+END_SRC

Ahora una vez que se abra el jupyter server se debe copiar la linea:

http://localhost:8080/?token=xxxxxx

y pastear en el browser local (firefox o lo que sea)

Bingo! Estamos corriendo cosas de jupyter en grial con conexion en la maquina local.


** Datos y recursos disponibles

En el directorio:

/home/data

Se encuentran los links a todos los datos disponibles.

** Virtual environment para Machine learning

La version de python por default en grial es la python 3.6.13. Esta tiene todas las librerias de machine learning instaladas.

Si se quiere trabajar en versiones mas nuevas hay un par de virtual enviroments en /usr/loca/


En /usr/local de grial se encuentra instalada una version (venv) para ml con python 3.9

Para trabajar en ese enviroment se debe hacer

#+BEGIN_SRC python
source /usr/local/ml/bin/activate
#+END_SRC


#+BEGIN_SRC python
source /usr/local/ml-p39/bin/activate
#+END_SRC
